cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
cmake_policy(VERSION 2.8)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")

set(NAME NAUTILUS_EXAMPLES)

project(${NAME})

set(NAUTILUS_HEADER_DIRECTORY "${CMAKE_SOURCE_DIR}/include")
set(NAUTILUS_HEADER_MOVE_DIR "${NAUTILUS_HEADER_DIRECTORY}/nautilus")

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/lib")

include_directories("ext")
include_directories("ext/glm")
include_directories("ext/assimp/include")
include_directories("ext/tinyobjloader")
include_directories("ext/irrklang/include")
include_directories("ext/stb")
include_directories("ext/glfw/include")
include_directories("ext/glad/include")
include_directories("ext/vulkan/include")
include_directories(${NAUTILUS_HEADER_DIRECTORY})

set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)

set(ASSIMP_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_SAMPLES OFF CACHE BOOL "" FORCE)

set(OpenGL_GL_PREFERENCE "GLVND")

add_subdirectory("ext/glm")

OPTION(USE_D2D_WSI "Build the project using Direct to Display swapchain" OFF)
OPTION(USE_WAYLAND_WSI "Build the project using Wayland swapchain" OFF)

set(RESOURCE_INSTALL_DIR "" CACHE PATH "Path to install resources to (leave empty for running uninstalled)")

IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	set(MACOSX_COMPILATION ON)
	set(CMAKE_INSTALL_RPATH "$ORIGIN/../libs:$ORIGIN/")
ENDIF()

message(STATUS "Using module to find Vulkan")
find_package(Vulkan)
message(STATUS "Using module to find OpenGL")
find_package(OpenGL REQUIRED)

IF(MACOSX_COMPILATION)
	MESSAGE(STATUS "Using module to find ASSIMP")
	add_subdirectory("ext/assimp")
	set(ASSIMP_LIBRARIES assimp)
	set(ASSIMP_FOUND ON)
	MESSAGE(STATUS "Using self-compiled ASSIMP library version")
	MESSAGE(STATUS "Using module to find GLFW")
	find_package(GLFW3)
	IF(NOT GLFW3_FOUND OR BUILD_ALL_FROM_SOURCE)
		add_subdirectory("ext/glfw")
		set(GLFW3_LIBRARY glfw)
		set(GLFW3_FOUND ON)
		MESSAGE(STATUS "Using self-compiled GLFW library version")
	ENDIF()
	find_package(Threads REQUIRED)
ELSE()
	IF(WIN32)
		IF(NOT Vulkan_FOUND)
			find_library(Vulkan_LIBRARIES NAMES vulkan-1 vulkan PATHS "${CMAKE_SOURCE_DIR}/lib/vulkan" REQUIRED)
			IF(Vulkan_LIBRARIES)
				set(Vulkan_FOUND ON)
				MESSAGE(STATUS "Using bundled Vulkan library version")
			ENDIF()
		ENDIF()
		add_subdirectory("ext/assimp")
		set(ASSIMP_LIBRARIES assimp)
		set(ASSIMP_FOUND ON)
		MESSAGE(STATUS "Using self-compiled ASSIMP library version")
		add_subdirectory("ext/glfw")
		set(GLFW3_LIBRARY glfw)
		set(GLFW3_FOUND ON)
		MESSAGE(STATUS "Using self-compiled GLFW library version")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVK_USE_PLATFORM_WIN32_KHR")
	ELSE(WIN32)
		IF(NOT Vulkan_FOUND)
			find_library(Vulkan_LIBRARIES NAMES vulkan HINTS "$ENV{VULKAN_SDK}/lib" "${CMAKE_SOURCE_DIR}/lib/vulkan" REQUIRED)
			IF(Vulkan_LIBRARIES)
				set(Vulkan_FOUND ON)
				MESSAGE(STATUS "Using bundled Vulkan library version")
			ENDIF()
		ENDIF()
		MESSAGE(STATUS "Using module to find ASSIMP")
		find_package(ASSIMP)
		IF(NOT ASSIMP_FOUND OR BUILD_ALL_FROM_SOURCE)
			add_subdirectory("ext/assimp")
			set(ASSIMP_LIBRARIES assimp)
			set(ASSIMP_FOUND ON)
			MESSAGE(STATUS "Using self-compiled ASSIMP library version")
		ENDIF()
		MESSAGE(STATUS "Using module to find GLFW")
		find_package(GLFW3)
		IF(NOT GLFW3_FOUND OR BUILD_ALL_FROM_SOURCE)
			add_subdirectory("ext/glfw")
			set(GLFW3_LIBRARY glfw)
			set(GLFW3_FOUND ON)
			MESSAGE(STATUS "Using self-compiled GLFW library version")
		ENDIF()
		find_package(Threads REQUIRED)
	IF(USE_D2D_WSI)
		MESSAGE("Using direct to display extension...")
		add_definitions(-D_DIRECT2DISPLAY)
	ELSEIF(USE_WAYLAND_WSI)
		find_package(Wayland REQUIRED)
		IF(NOT WAYLAND_FOUND)
			message(FATAL_ERROR "Wayland development package not found")
		ENDIF()
		pkg_check_modules(WAYLAND_PROTOCOLS REQUIRED wayland-protocols)
		IF(NOT WAYLAND_PROTOCOLS_FOUND)
			message(FATAL_ERROR "Wayland protocols package not found")
		ENDIF()
		find_program(WAYLAND_SCANNER wayland-scanner)
		IF(NOT WAYLAND_SCANNER)
			message(FATAL_ERROR "wayland-scanner binary not found")
		ENDIF()
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVK_USE_PLATFORM_WAYLAND_KHR")
		include_directories(${WAYLAND_INCLUDE_DIR})
		execute_process(COMMAND ${PKG_CONFIG} --variable=pkgdatadir wayland-protocols OUTPUT_VARIABLE protocol_dir OUTPUT_STRIP_TRAILING_WHITESPACE)
		execute_process(COMMAND ${WAYLAND_SCANNER} client-header ${protocol_dir}/stable/xdg-shell/xdg-shell.xml ${CMAKE_BINARY_DIR}/xdg-shell-client-protocol.h
				COMMAND ${WAYLAND_SCANNER} private-code ${protocol_dir}/stable/xdg-shell/xdg-shell.xml ${CMAKE_BINARY_DIR}/xdg-shell-protocol.c)
		include_directories(${CMAKE_BINARY_DIR})
	ELSE(USE_D2D_WSI)
		MESSAGE(STATUS "Using module to find XCB libraries")
		find_package(XCB REQUIRED)
		set(XCB_LIBRARIES ${XCB_LIBRARIES} X11)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVK_USE_PLATFORM_XCB_KHR")
	ENDIF(USE_D2D_WSI)
		# Todo : android?
	ENDIF(WIN32)
ENDIF()

IF(NOT Vulkan_FOUND)
	MESSAGE(FATAL_ERROR "Could not find Vulkan library!")
ELSE()
	MESSAGE(STATUS "Found Vulkan")
ENDIF()

IF(NOT OPENGL_FOUND)
	MESSAGE(FATAL_ERROR "Could not find OpenGL library!")
ELSE()
	MESSAGE(STATUS "Found OpenGL")
ENDIF()

IF(NOT ASSIMP_FOUND)
	MESSAGE(FATAL_ERROR "Could not find ASSIMP library!")
ELSE()
	MESSAGE(STATUS "Found ASSIMP")
ENDIF()

IF(NOT PKG_CONFIG_FOUND)
	MESSAGE(STATUS "pkg-config not found")
ELSE()
	MESSAGE(STATUS "Found pkg-config")
ENDIF()

IF(NOT GLFW3_FOUND)
	MESSAGE(FATAL_ERROR "Could not find GLFW library!")
ELSE()
	MESSAGE(STATUS "Found GLFW")
ENDIF()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNOMINMAX -D_USE_MATH_DEFINES")

IF(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-switch-enum")
ENDIF()

add_definitions(-D_CRT_SECURE_NO_WARNINGS)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")

file(GLOB SOURCE *.cpp)

IF(RESOURCE_INSTALL_DIR)
	add_definitions(-DVK_EXAMPLE_DATA_DIR=\"${RESOURCE_INSTALL_DIR}/\")
	install(DIRECTORY data/ DESTINATION ${RESOURCE_INSTALL_DIR}/)
ELSE()
	add_definitions(-DVK_EXAMPLE_DATA_DIR=\"${CMAKE_SOURCE_DIR}/data/\")
ENDIF()

IF(MSVC)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc /std:c++17")
ENDIF(MSVC)

IF(MACOSX_COMPILATION)
	link_libraries(${Vulkan_LIBRARIES} curses ${GLFW3_LIBRARY} ${ASSIMP_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
ELSE()
	IF(WIN32)
		link_libraries(${Vulkan_LIBRARIES} ${GLFW3_LIBRARY} ${ASSIMP_LIBRARIES})
	ELSE(WIN32)
		link_libraries(${XCB_LIBRARIES} curses stdc++fs dl ${Vulkan_LIBRARIES} ${GLFW3_LIBRARY} ${ASSIMP_LIBRARIES} ${WAYLAND_CLIENT_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
	ENDIF(WIN32)
ENDIF()

file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/bin/")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin/")

add_subdirectory("nautilus")
add_subdirectory("examples")